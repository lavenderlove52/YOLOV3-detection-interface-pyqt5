# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'YOLOV3.ui'
#
# Created by: PyQt5 UI code generator 5.15.3
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from PyQt5.QtWidgets import *
from PyQt5.QtGui import QIcon, QPixmap
import os
import sys
# from yolov3 import train, predict


class MyClass(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()
        self.child_window = ChildClass()

    def initUI(self):
        self.setWindowTitle("目标检测")
        # self.setWindowIcon(QIcon("iconimg/zhou.png"))
        self.resize(350, 200)
        self.TModelSelectSignal = [0, 0]   #选择按钮对应的模型
        self.TModel= [1, 0]                 #表示已经训练好的模型编号
        # self.PModelSelectSignal = [0, 0]

        myframe = QFrame(self)
        btn2 = QPushButton("开始训练模型", self)
        btn2.clicked.connect(self.TestModel)
        btn3 = QPushButton("上传数据集", self)
        btn3.clicked.connect(self.DataExplorerSelect)
        btn5 = QPushButton("退出程序", self)
        btn5.clicked.connect(self.close)
        btn6 = QPushButton("检测", self)
        btn6.clicked.connect(self.show_child)

        # label1 = QLabel("训练模型", self)
        combol1 = QComboBox(myframe)
        combol1.addItem("                      选择模型")
        combol1.addItem("                      YOLOv3")
        combol1.addItem("                      YOLOv4")
        combol1.activated[str].connect(self.TModelSelect)

        vlo = QVBoxLayout()
        # vlo.addWidget(label1)
        vlo.addWidget(combol1)
        vlo.addWidget(btn3)
        vlo.addWidget(btn2)
        vlo.addWidget(btn6)
        vlo.addWidget(btn5)
        vlo.addStretch(1)
        hlo = QVBoxLayout(self)
        hlo.addLayout(vlo)
        hlo.addWidget(myframe)
        self.show()

    def DataExplorerSelect(self):
        path = r'D:\pycharm\QTYOLOV3\yolov3\VOCdevkit\VOC2007'
        os.system("explorer.exe %s" % path)

    def show_child(self):
        TModel1 = self.TModel
        self.child_window.GetTModel(TModel1)
        self.child_window.show()

    def TModelSelect(self, s):
        if s == '                     YOLOv3':
            self.TModelSelectSignal[0] = 1
            # print(self.TModelSelectSignal[0])
        elif s == '                     YOLOv4':
            self.TModelSelectSignal[1] = 1
            # print(self.TModelSelectSignal[1])

    def TestModel(self):
        if self.TModelSelectSignal[0] == 1:
            # os.popen('python ./yolov3/train.py')
            # start_dire = r'./yolov3/train.py'
            # r = os.system("python %s" % start_dire)
            # print(r)
            train.run()
            self.TModelSelectSignal[0] = 0

        else:
            print("没有该模型")

    def closeEvent(self, event):
        result = QMessageBox.question(self, "提示：", "您真的要退出程序吗", QMessageBox.Yes|QMessageBox.No, QMessageBox.Yes)
        if result == QMessageBox.Yes:
            event.accept()
        else:
            event.ignore()


class ChildClass(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()
        self.TModel = []
        self.openfile_name_image = ''
        self.result_name_image = ''

    def initUI(self):
        self.resize(1100, 450)
        self.setWindowTitle("目标检测")
        # self.setWindowIcon(QIcon("iconimg/zhou.png"))
        self.PModelSelectSignal = [0, 0]

        myframe = QFrame(self)
        self.label1 = QLabel("检测模型", self)
        combol1 = QComboBox(myframe)
        combol1.addItem("选择检测模型")
        combol1.addItem("YOLOv3")
        combol1.addItem("YOLOv4")
        combol1.activated[str].connect(self.PModelSelect)
        btn1 = QPushButton("选择检测图片", self)
        btn1.clicked.connect(self.select_image)

        btn2 = QPushButton("开始检测", self)
        btn2.clicked.connect(self.PredictModel)

        self.label2 = QLabel("", self)
        self.label2.resize(400, 400)
        self.label3 = QLabel("", self)
        self.label3.resize(400, 400)
        label4 = QLabel("                                         原始图片", self)
        label5 = QLabel("                                         检测图片", self)
        vlo2 = QHBoxLayout()
        vlo2.addWidget(label4)
        vlo2.addWidget(label5)

        vlo = QHBoxLayout()
        vlo.addStretch()
        # vlo.addWidget(btn1)
        vlo.addWidget(self.label1)
        vlo.addWidget(combol1)
        vlo.addWidget(btn1)
        vlo.addWidget(btn2)
        vlo.addStretch(1)

        vlo1 = QHBoxLayout()
        vlo1.addWidget(self.label2)
        vlo1.addWidget(self.label3)

        hlo = QVBoxLayout(self)
        hlo.addLayout(vlo)
        hlo.addLayout(vlo1)
        hlo.addStretch(1)
        hlo.addLayout(vlo2)
        hlo.addStretch(0)

        hlo.addWidget(myframe)

#   将训练界面已经训练模型的编号告诉检测界面
    def GetTModel(self, a):
        self.TModel = [1, 0]

    def closeEvent(self, event):
        result = QMessageBox.question(self, "提示：", "您真的要退出程序吗", QMessageBox.Yes | QMessageBox.No, QMessageBox.Yes)
        if result == QMessageBox.Yes:
            event.accept()
        else:
            event.ignore()

    def ShowImage(self):
        pass

    def select_image(self):
        print('1')
        self.openfile_name_image, _ = QFileDialog.getOpenFileName(self, "选择照片文件",
                                                             r"./yolov3/imgtest/")
        print('加载照片文件地址为：' + str(self.openfile_name_image))
        self.label2.setPixmap(QPixmap(str(self.openfile_name_image)))
        self.label2.resize(300, 400)
        self.label2.setScaledContents(True)

    def select_image1(self):
        print('1')
        global openfile_name_image1
        openfile_name_image1, _ = QFileDialog.getOpenFileName(self, "选择照片文件",
                                                             r"./yolov3/img/")
        print('加载照片文件地址为：' + str(openfile_name_image1))
        self.label3.setPixmap(QPixmap(str(openfile_name_image1)))
        self.label3.resize(300, 400)
        self.label3.setScaledContents(True)

    def PModelSelect(self, s):
        if s == 'YOLOv3':
            if self.TModel[0] == 1:
                self.PModelSelectSignal[0] = 1
                self.PModelSelectSignal[1] = 0
                print(self.PModelSelectSignal[0])
            else:
                print("模型YOLOV3未训练")
                self.PModelSelectSignal[1] = 0
        elif s == 'YOLOv4':
            if self.TModel[1] == 1:
                self.PModelSelectSignal[1] = 1
                self.PModelSelectSignal[0] = 0
                print(self.PModelSelectSignal[1])
            else:
                print("YOLOv4")
                self.PModelSelectSignal[0] = 0

    def PredictModel(self):
        if self.PModelSelectSignal[0] == 1:
            predict.predict(self.openfile_name_image)
        elif self.PModelSelectSignal[1] == 1:
            print('yolov4正在检测')
        else:
            print('没有该模型')
        a = self.openfile_name_image
        a = a.split('/')
        print(a)
        a = './yolov3/imgtestresult/' + a[-1]
        self.label3.setPixmap(QPixmap(a))
        self.label3.resize(300, 400)
        self.label3.setScaledContents(True)
        print(a)


if __name__ == '__main__':
    app = QApplication(sys.argv)
    mc = MyClass()
    sys.exit(app.exec_())
